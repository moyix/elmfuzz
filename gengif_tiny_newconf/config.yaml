# Automatically generated by genvariants_parallel.dump_config() on 2023-12-12 11:45:29 AM with options:
#     {'skip_comments': False, 'skip_defaults': False, 'skip_names': ['config', 'dump_config']}
# Based on existing config file(s): gengif_tiny_newconf/config.yaml

# -------------------------------- Global options --------------------------------

# Options to configure the target program being fuzzed
target:
  # Source files in the target (default: None)
  srcs:
  - ~/git/gifdec/gifread.c
  # Path to the target binary with coverage instrumentation (default: None)
  covbin: ~/git/gifdec/gifread.cov

# Options to configure the model(s) used for variant generation
model:
  # List of model names (default: None)
  names:
  - codellama/CodeLlama-13b-hf
  # List of model endpoints, formatted as name:endpoint (default: None)
  endpoints:
  - codellama/CodeLlama-13b-hf:http://127.0.0.1:8192

# Options to configure the run of the evolutionary algorithm
run:
  # Seed files (generator programs that will be mutated) (default: None)
  seeds:
  - ~/git/elmfuzz/gengif_tiny.py
  # Number of generations to run (default: 10)
  num_generations: 50
  # Selection strategy (one of: elites, best_of_generation) (default: elites)
  selection_strategy: elites
  # Number of seeds to select each generation (default: 10)
  num_selected: 10
  # Directory (template) to store generated variants (default:
  # {ELMFUZZ_RUNDIR}/{GEN}/variants/{MODEL})
  genvariant_dir: '{ELMFUZZ_RUNDIR}/{GEN}/variants/{MODEL}'
  # Directory (template) to store generated outputs (default:
  # {ELMFUZZ_RUNDIR}/{GEN}/outputs/{MODEL})
  genoutput_dir: '/fastdata/randomgifs/{ELMFUZZ_RUN_NAME}/{GEN}/{MODEL}'
  # Directory (template) to store logs (default: {ELMFUZZ_RUNDIR}/{GEN}/logs)
  logdir: '{ELMFUZZ_RUNDIR}/{GEN}/logs'
  # Clean the output directories before running (default: False)
  clean: true

# ------------------------- Specific CLI utility options -------------------------

cli:
  # genvariants_parallel: Use a code model to generate variants of a file.
  genvariants_parallel:
    # Model to use for generation (default: codellama/CodeLlama-13b-hf)
    model_name: codellama/CodeLlama-13b-hf
    # Disable the completion mutator (default: False)
    no_completion: false
    # Disable the FIM (infilling) mutator (default: False)
    no_fim: false
    # Disable the splice mutator (default: False)
    no_splice: false
    # Number of variants to generate for each seed (default: 1)
    num_variants: 30
    # Directory to write variants to (default: .)
    output_dir: .
    # Directory to write generation metadata to (default: logs)
    log_dir: logs
    # When making random cuts, always start at this line. Allows specifying an
    # immutable region not subject to mutation. (default: 0)
    start_line: 9
    # Number of inference jobs to run in parallel (default: 16)
    jobs: 16

    # Generation parameters
    gen:
      # Generation temperature (default: 0.2)
      temperature: 0.2
      # Maximum number of tokens to generate (default: 2048)
      max_new_tokens: 2048
      # Repetition penalty (default: 1.1)
      repetition_penalty: 1.1
  genoutputs:
    # Don't catch exceptions in the main driver loop (default: False)
    raise_errors: true
    # Options for the generator; will be passed to each module
    driver:
      # The function to run in each module (default: None)
      function_name: generate_random_gif
      # Timeout for each function run (in seconds) (default: 10)
      timeout: 10
      # Maximum size of the output file (in bytes) (default: 52428800)
      size_limit: 52428800
      # Maximum memory usage (in bytes) (default: 1073741824)
      max_mem: 1073741824
      # Suffix for output files (default: .gif)
      output_suffix: .gif
      # Number of times to run each function in each module (i.e., number of
      # outputs to generate) (default: 100)
      num_iterations: 100
  getcov:
    # Output file where coverage will be written (default: output.json)
    output: output.json
    # Number of parallel jobs (default: 64)
    jobs: 64
    # Path to AFL++ directory (for afl-showmap) (default:
    # /home/moyix/git/AFLplusplus)
    afl_dir: /home/moyix/git/AFLplusplus
